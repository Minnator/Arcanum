using Arcanum.API.UtilServices;

namespace Arcanum.API.Console;

/// <summary>
/// Defines the operations and properties for managing a console service,
/// including command registration, alias management, macro handling,
/// history navigation, and command execution.
/// </summary>
public interface IConsoleService : IService
{
   /// <summary>
   /// Gets the unique identifier associated with the console service instance.
   /// This identifier is used to differentiate between distinct instances
   /// of the console service, particularly in scenarios such as macro management
   /// and history tracking.
   /// </summary>
   string Identifier { get; }
   /// <summary>
   /// Gets or sets the current clearance level for the console service.
   /// This defines the access permissions required to execute commands
   /// and manage functionalities within the console.
   /// </summary>
   ClearanceLevel CurrentClearance { get; set; }

   /// <summary>
   /// Retrieves a list of registered command definitions without any aliases included.
   /// </summary>
   /// <returns>A read-only list of unique command definitions, sorted by their name.</returns>
   IReadOnlyList<ICommandDefinition> GetRegisteredCommandsWithoutAliases();
   
   /// <summary>
   /// Registers a new command definition in the console service.
   /// </summary>
   /// <param name="commandDefinition">The command definition to register, containing the command name, usage, required clearance level, aliases, and execution logic.</param>
   void RegisterCommand(ICommandDefinition commandDefinition);

   /// <summary>
   /// Unregisters an existing command from the console service.
   /// </summary>
   /// <param name="commandName">The name of the command to unregister. Case-insensitive.</param>
   void UnregisterCommand(string commandName);

   /// <summary>
   /// Gets the current index within the command history tracked by the console service.
   /// This index is used for navigating through previously executed commands, such as
   /// retrieving past commands using up and down arrow keys during console interaction.
   /// </summary>
   public int HistoryIndex { get; }
   
   /// <summary>
   /// Processes the given command line input, executes the associated command logic,
   /// and returns the resulting output as an array of strings where each string represents a line of output.
   /// </summary>
   /// <param name="commandLine">The command line input to process and execute.
   /// Includes the command name and its arguments.</param>
   /// <returns>An array of strings representing the output generated by executing the command.
   /// Returns an empty array if the command line is empty or no output is produced.</returns>
   string[] ProcessCommand(string commandLine);

   /// <summary>
   /// Retrieves the definition of a command based on its name.
   /// </summary>
   /// <param name="commandName">The name of the command to retrieve. Case-insensitive.</param>
   /// <param name="commandDefinition">When the method returns, contains the command definition if found; otherwise, null.</param>
   /// <returns>True if the command definition is found; otherwise, false.</returns>
   bool GetCommandDefinition(string commandName, out ICommandDefinition? commandDefinition);

   /// <summary>
   /// Sets an alias for a command, enabling an alternate name to invoke the specified command.
   /// </summary>
   /// <param name="alias">The new alias to associate with the command. Case-insensitive.</param>
   /// <param name="commandName">The name of the command to associate the alias with. Case-insensitive.</param>
   /// <returns>True if the alias was successfully set; otherwise, false.</returns>
   bool SetAlias(string alias, string commandName);

   /// <summary>
   /// Removes an alias from the console service if it exists and is not a base command name.
   /// </summary>
   /// <param name="alias">The alias to remove. Case-insensitive.</param>
   /// <returns>True if the alias was successfully removed; otherwise, false.</returns>
   bool RemoveAlias(string alias);

   /// <summary>
   /// Adds a new macro to the console service for the specified key with the associated value.
   /// </summary>
   /// <param name="key">The unique identifier for the macro that will trigger its execution. Cannot be null, empty, or whitespace.</param>
   /// <param name="value">The definition or content of the macro to associate with the specified key. Cannot be null or empty.</param>
   /// <returns>Returns true if the macro was successfully added, or false if the operation failed (e.g., duplicate key, invalid input).</returns>
   bool AddMacro(string key, string value);

   /// <summary>
   /// Removes an existing macro associated with the specified key from the console service.
   /// </summary>
   /// <param name="key">The unique identifier of the macro to be removed.</param>
   /// <returns>True if the macro was successfully removed; otherwise, false.</returns>
   bool RemoveMacro(string key);

   /// <summary>
   /// Executes a defined macro by its macroString and outputs the results.
   /// </summary>
   /// <param name="macroString">The unique identifier for the macro to be executed.</param>
   /// <param name="resultOutput">An array containing the output of the executed macro or an error message if the macro is not found.</param>
   /// <returns>True if the macro was executed successfully; otherwise, false if the macro was not found.</returns>
   void RunMacro(string macroString, out string[] resultOutput);

   
   /// <summary>
   /// Clears all macros currently stored for the console service associated with the specified identifier.
   /// </summary>
   void ClearMacros();

   /// <summary>
   /// Retrieves a read-only dictionary containing all defined macros in the console service.
   /// </summary>
   /// <returns>A read-only dictionary where the keys are macro identifiers and the values are their corresponding definitions.</returns>
   IReadOnlyDictionary<string, string> GetMacros();

   /// <summary>
   /// Retrieves the history of executed commands in the console service.
   /// </summary>
   /// <returns>A read-only list of strings representing the command history in the order they were executed.</returns>
   IReadOnlyList<string> GetHistory();

   /// <summary>
   /// Clears the history of previously executed commands within the console service.
   /// </summary>
   void ClearHistory();

   /// <summary>
   /// Retrieves the previous entry from the command history, allowing navigation backward through the command history.
   /// </summary>
   /// <returns>
   /// The previous history entry as a string, or null if the history is empty or the beginning of the history is reached.
   /// </returns>
   string? GetPreviousHistoryEntry();

   /// <summary>
   /// Retrieves the next entry from the console history relative to the current position.
   /// </summary>
   /// <returns>
   /// The next history entry as a string if available, or null if there are no further entries.
   /// </returns>
   string? GetNextHistoryEntry();

   /// <summary>
   /// Retrieves a read-only list of distinct command names currently registered in the console service.
   /// The list is ordered alphabetically.
   /// </summary>
   /// <returns>A read-only list of command names.</returns>
   IReadOnlyList<string> GetCommandNames();

   /// <summary>
   /// Retrieves the list of all aliases currently registered in the console service.
   /// </summary>
   /// <returns>A read-only list of command aliases.</returns>
   IReadOnlyList<string> GetCommandAliases();

   /// <summary>
   /// Retrieves the list of all currently registered command definitions within the console service.
   /// </summary>
   /// <returns>A read-only list of registered command definitions, each containing the command name, usage, required clearance level, aliases, and execution logic.</returns>
   IReadOnlyList<ICommandDefinition> GetRegisteredCommands(); // Returns the definitions

   /// <summary>
   /// Clears the console service state, including macros, history, and other transient data.
   /// </summary>
   void Clear();
}