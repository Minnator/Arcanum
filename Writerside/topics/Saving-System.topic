<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Saving System" id="Saving-System">

    <p>The goal of the saving system is to provide an easy and maintainable system to manage objects which are saved in files.</p>
    <code-block lang="plantuml">
    @startuml
    Bob->Alice : Hello!
    @enduml
    </code-block>
    <code-block lang="plantuml">
        @startuml
        scale max 900 width
        ' --- Style &amp; Layout ---
        title Complete System Design for Editable File Objects
        skinparam classAttributeIconSize 0
        hide empty members
        
        ' --- Grouping into Packages/Concerns ---
        package "Core Data &amp; Contracts" &lt;&lt;Rectangle&gt;&gt;  {
            interface ISaveable {
                &lt;&lt;Interface&gt;&gt;
                + GetContent(sb: StringBuilder)
                + GetEditingComment(sb: StringBuilder)
                + SerializeToString(): string
            }
        
            class MyDataObject {
                + Name: string
                + Value: int
                + GetContent(sb: StringBuilder)
                + GetEditingComment(sb: StringBuilder)
                + SerializeToString(): string
            }
            MyDataObject .up.|&gt; ISaveable
        }
        
        package "File Structure &amp; Composition" &lt;&lt;Node&gt;&gt; {
            ' --- Strategy for Header/Footer ---
            interface IFileInformationProvider {
                &lt;&lt;Interface&gt;&gt;
                + GetFileHeader(sb: StringBuilder)
                + GetFileFooter(sb: StringBuilder)
            }
        
            class ContainerBasedInfoProvider {
                + HeaderText: string
                + FooterText: string
                + GetFileHeader(sb: StringBuilder)
                + GetFileFooter(sb: StringBuilder)
            }
            ContainerBasedInfoProvider .up.|&gt; IFileInformationProvider
        
            class SaveableBasedInfoProvider {
                - saveable: ISaveable
                + &lt;&lt;create&gt;&gt; SaveableBasedInfoProvider(saveable: ISaveable)
                + GetFileHeader(sb: StringBuilder)
                + GetFileFooter(sb: StringBuilder)
            }
            SaveableBasedInfoProvider .up.|&gt; IFileInformationProvider
            SaveableBasedInfoProvider "1" o-- "1" ISaveable : "delegates to"
        
        
            ' --- File Abstractions ---
            abstract class FileObj {
                &lt;&lt;abstract&gt;&gt;
                + Path: PathObj
                + InfoProvider: IFileInformationProvider
                + {abstract} GetSaveables(): IEnumerable&lt;ISaveable&gt;
                + ComposeFile(): string
                + SaveFile()
            }
            FileObj "1" o-- "1" PathObj
            FileObj "1" o-- "1" IFileInformationProvider : "uses a"
        
            class FileObjSingle extends FileObj {
                + Content: ISaveable
                + &lt;&lt;create&gt;&gt; FileObjSingle(path: PathObj, content: ISaveable)
                + GetSaveables(): IEnumerable&lt;ISaveable&gt;
            }
            FileObjSingle "1" *-- "1" ISaveable
            FileObjSingle .&gt; SaveableBasedInfoProvider : &lt;&lt;creates&gt;&gt;
        
            class FileObjMultiple extends FileObj {
                + Content: List&lt;ISaveable&gt;
                + &lt;&lt;create&gt;&gt; FileObjMultiple(path: PathObj, content: List&lt;ISaveable&gt;, infoProvider: IFileInformationProvider)
                + GetSaveables(): IEnumerable&lt;ISaveable&gt;
            }
            FileObjMultiple "1" *-- "1..*" ISaveable
        }
        
        
        package "Orchestration &amp; State Management" &lt;&lt;Cloud&gt;&gt; {
            class SaveMaster {
              - fileObjects: List&lt;FileObj&gt;
              - initialStates: Dictionary&lt;ISaveable, string&gt;
              + RegisterFile(file: FileObj)
              + HasUnsavedChanges(): bool
              + GetChangedFiles(): List&lt;FileObj&gt;
              + SaveAllChanges()
              - CalculateState(saveable: ISaveable): string
            }
            SaveMaster "1" o-- "0..*" FileObj : "manages"
            SaveMaster ..&gt; ISaveable : "tracks state of"
        }
        
        package "Utilities" &lt;&lt;Database&gt;&gt; {
            class PathObj {
              + SourcePath: string
              + DestinationPath: string
              + GetWritePath(): string
            }
        }
        @enduml
    </code-block>
</topic>